name: Release
on:
  release:
    types: [published]

jobs:
  init:
    name: init
    runs-on: ubuntu-latest
    outputs:
      GoVersion: ${{ steps.step1.outputs.GoVersion }}
    steps:
    - id: step1
      name: Set GoVersion
      run: |
        GoVersion=$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oEm 1 '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | cut -d':' -f2 | sed 's/ //g; s/"//g')
        echo "::set-output name=GoVersion::${GoVersion}"

  build:
    name: Build and Upload
    needs: [init]
    strategy:
      matrix:
        # Include amd64 on all platforms.
        goos: [windows, freebsd, openbsd, linux, dragonfly, darwin]
        goarch: [amd64, 386]
        exclude:
          # Exclude i386 on darwin and dragonfly.
          - goarch: 386
            goos: dragonfly
          - goarch: 386
            goos: darwin
        include:
          # BEGIN Linux ARM 5 6 7
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 5
          # END Linux ARM 5 6 7
          # BEGIN Windows ARM 7
          - goos: windows
            goarch: arm
            goarm: 7
          # END Windows ARM 7
          # BEGIN FreeBSD ARM 6 7
          - goos: freebsd
            goarch: arm
            goarm: 6
          - goos: freebsd
            goarch: arm
            goarm: 7
          # END FreeBSD ARM 6 7
          # BEGIN OpenBSD ARM 6 7
          - goos: openbsd
            goarch: arm
            goarm: 6
          - goos: openbsd
            goarch: arm
            goarm: 7
          # END OpenBSD ARM 6 7
          # BEGIN Other architectures
          - goos: darwin
            goarch: arm64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: riscv64
          - goos: windows
            goarch: arm64
          - goos: android
            goarch: arm64
          - goos: freebsd
            goarch: arm64
          - goos: openbsd
            goarch: arm64
          # BEGIN MIPS
          - goos: linux
            goarch: mips64
          - goos: linux
            goarch: mips64le
          - goos: linux
            goarch: mipsle
          - goos: linux
            goarch: mips
          # END MIPS
          # END Other architectures
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - name: Show workflow info
      run: |
        assertName="${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm }}"
        echo "GOOS: ${{ matrix.goos }} GOARCH: ${{ matrix.goarch }} GOARM: ${{ matrix.goarm }}"
        echo "ASSERT=${assertName}" >> ${GITHUB_ENV}

    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ needs.init.outputs.GoVersion }}

    - name: Dep
      run: make dep

    - name: Build
      run: |
        make build TARGET=${{ matrix.goos }} ARCH=${{ matrix.goarch }} ARM=${{ matrix.goarm }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          mv healthreport.exe healthreport-${{ env.ASSERT }}.exe
        else
          mv healthreport healthreport-${{ env.ASSERT }}
        fi

    - name: Upload Assets
      run: |
        gh release upload ${GITHUB_REF/refs\/tags\//} ${{ env.files }} --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # attribute
        files: healthreport*
